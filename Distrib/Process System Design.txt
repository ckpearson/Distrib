Simple design document aiming to hold the design for the process system.

Terms:

> Process
	A self-contained distrib process adhering to the IDistribProcess
	interface.

	Performs a unit of work as prescribed, takes an input and produces
	an output.

> Plugin
	A plugin adhering to the IPlugin interface and suitably decorated
	with a subsystem plugin export attribute, also adheres to the given
	interface for that subsystem (i.e. IDistribProcess)

> Plugin Export Attribute
	An attribute deriving from Distrib.Plugins.PluginAttribute.

	This attribute provides the plugin system with key details about how
	to deal with the plugin class, as long as allowing the user to provide
	subsystem-specific details that can be attached and propogated via the
	plugin system's additional metadata facility.

> Subsystem
	Any system within Distrib that allows for functionality to be extended
	via a plugin class (Process etc).

> Metadata Bundle
	Every plugin can be exported (via their attribute) to contain metadata
	that may be useful to the plugin or the using subsystem; these take the form
	of a class deriving from Plugins.PluginAdditionalMetadataObject and implementing
	an interface for accessing the metadata properties on the object.

	This system allows bespoke concrete objects to be attached to the plugin descriptor
	itself, which are then available to any consuming subsystems or the plugin itself.

> Plugin Descriptor
	The fundamental object that holds all the details of a given plugin class ready
	for instantiation.

In additonal the above core terms for dealing with the lower levels of the Distrib
environment, the following apply to processes specifically:

> Job
	A self-contained bundle of data bound for a given process; a job holds the details
	the process will need to perform the work asked by the job.

	Typically a job consists of:

	> A unique identifier
	> The process it is initially bound for
	> The inputs the job is carrying for the work to be performed by the process
	> The full process history
		A job may be passed between multiple jobs with varying inputs and outputs
		this is primarily used for data that needs to be passed through a number
		of processes as a cumulative workflow (e.g. each output becomes the next input)

		An example where this would be useful could be archiving and then e-mailing.